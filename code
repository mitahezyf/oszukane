public class RESZTA_AZ {
    static Scanner skan = new Scanner(System.in);
    public static void main(String[] args) {
        int[] monety = {500, 200, 100, 50, 20, 10, 5, 2, 1};
        int[] dostepne = {1, 2, 0 , 1, 2, 3,5, 1, 0}; //10 47
        int[] LICZ = new int[monety.length];
        int r;
        int i = 0;
        System.out.println("podaj zl: ");
        int zl = Integer.parseInt(skan.next());
        System.out.println("podaj gr: ");
        int gr = Integer.parseInt(skan.next());
        r = zl * 100 + gr
        while (r > 0 && i < monety.length){
            if (r >= monety[i] && dostepne[i] > 0){
                System.out.print("wydano: " + monety[i]/100.0 + " ");
                LICZ[i]++;
                r -= monety[i];
                dostepne[i]--;
            }
            else i++;
        }
        System.out.println();
        for (int j = 0; j<monety.length; j++){
            System.out.println(monety[j]/100.0 + " " + LICZ[j]);
        }
        if (r > 0){
            System.out.println("nie mozna wydac calej reszty: " + r/100.0);
        }
    }
}
----------------------------------------------------------------

public class RESZTA_MC {
    static Scanner skan = new Scanner(System.in);
    static Random rand = new Random();

    public static void main(String[] args) {

        int[] monety = {500, 200, 100, 50, 20, 10, 5, 2, 1};
        int limitMonet = 21;
        int losowania = 100;
        int minLimitWydanych = limitMonet;
        int i, r, moneta;
        int[] wydaneMonety = new int[limitMonet];
        int[] minWydaneMonety = new int[limitMonet];

        System.out.println("podaj zl: ");
        int zl = skan.nextInt();
        System.out.println("podaj gr: ");
        int gr = skan.nextInt();

        for (i = 0; i < losowania; i++) {
            r = zl * 100 + gr;
            int liczbaWydanych = 0;
            while (r > 0 && liczbaWydanych < limitMonet){
                moneta = monety[rand.nextInt(monety.length)];
                if (r >= moneta){
                    wydaneMonety[liczbaWydanych] = moneta;
                    r -= moneta;
                    liczbaWydanych++;
                }
            }

            if (liczbaWydanych < minLimitWydanych){
                minLimitWydanych = liczbaWydanych;
                for (int j = 0; j < liczbaWydanych; j++) {
                    minWydaneMonety[j] = wydaneMonety[j];
                }
            }
        }

        if (minLimitWydanych < limitMonet){
            System.out.println("reszta: ");
            for (int j = 0; j < minLimitWydanych; j++)
                System.out.print(minWydaneMonety[j]/100.0 + " ");
        }
        else System.out.println("nie da rady wydac reszty ");
    }
}
----------------------------------------------------------------

public class FiguraMC {
    public static void main(String[] args) {
        System.out.println("POLE = " + pole(100));
    }
    
    public static double pole(int llos) {
        Random los = new Random();
        int licz = 0;
        for (int i = 0; i < llos; i++) 
        {
            double x = (los.nextInt(301) - 151) /100.0; //(los.nextInt(101) -50 )/ 1.0;
            //double z = (los.nextInt(10001) -5000 )/ 100.0;
            //double y = los.nextInt(101)/100.0;
            double y = (los.nextInt(301) -150) /100.0; //(los.nextInt(101) -50 )/ 1.0;
            System.out.println("x= "+x+"\ty= "+y);
            if(y >= (x * x + 2*x)) {
                licz++;
                System.out.println(x + " " + y + " " + (x * x + 2*x) );
            }
        }
        return ( licz/100.0);
    }
}
----------------------------------------------------------------

public class komary {
    static int tydzien=1;
    static double licz(double populacja, double chlopy, double baby){
        if(chlopy>=baby) {
            System.out.println("Populacja: "+(int)populacja);
            System.out.println("Chlopy: "+(int)chlopy);
            System.out.println("Baby: "+(int)baby);
            return tydzien;
        }
        else {
            tydzien++;
            chlopy = chlopy*0.98+populacja*0.1;
//            System.out.println("Chłopy: "+chlopy);
            baby = baby*0.95+populacja*0.1;
//            System.out.println("Baby: "+baby);
            return licz(chlopy+baby, chlopy, baby);
        }
    }
    public static void main(String[] args) {
        System.out.println(licz(1000,450,550));
    }
}
----------------------------------------------------------------

}
----------------------------------------------------------------

public class bakteriePD {

    public static void main(String[] args) {
        System.out.println(bakt(8));
    }

    static int bakt(int czas){
        int[] tab = new int[czas + 1];
        if (czas == 0) return 0;
        else if (czas == 1) return 1;
        
        tab[1] = 1;
        tab[2] = 2;
        for (int i = 3; i < tab.length; i++) {
            tab[i] = 2 * tab[i - 2];
        }

        return tab[tab.length - 1];
    }
}

----------------------------------------------------------------
public class bakterieDZ {

    public static void main(String[] args) {
        System.out.println(bakt(8));
    }

    static int bakt(int czas){
        if (czas == 0) return 0;
        else if (czas < 2)
            return 1;
        else if (czas == 2)
            return 2 * bakt(czas - 1);
        else
            return 2*bakt(czas-2);

    }
}

----------------------------------------------------------------

public class epidemiaDZ {
    public static void main(String[] args) {
        final int dni = 7;
//        System.out.println("zdrowych: " + (10000 - epidemia(dni))
//                + ", chorych: " + epidemia(dni));
        System.out.println(epidemia(8));
    }

   static int epidemia(int dni){
       if (dni == 0)
           return 0;
       else if ( dni == 1)
           return 10;
       else if (dni > 1 && dni < 8)
           return 3 * epidemia(dni - 1);
       else if (dni == 8)
           return 3 * epidemia(dni - 1) - epidemia( dni - 7);
       else
           return 3 * epidemia(dni - 1) - 2 * epidemia(dni - 8);
   }
}

----------------------------------------------------------------

public class epidemiaPD {
    public static void main(String[] args) {
        final int dni = 5;
//        System.out.println("zdrowych: " + (10000 - epidemia(dni))
//                + ", chorych: " + epidemia(dni));
        System.out.println(epidemia(3));
    }

    static int epidemia(int dni) {
        int[] tab = new int[dni + 1];

        if (dni == 0)
            return 0;
        if (dni == 1)
            return 10;

        tab[1] = 10;

        for (int i = 2; i < tab.length; i++) {
            if (i < 8)
                tab[i] = 3 * tab[i - 1];
            else if (i == 8) {
                tab[i] = 3 * tab[i - 1] - tab[i - 7];
            }
            else tab[i] = 3 * tab[i - 1] - 2*tab[i - 8];
        }
        return tab[tab.length - 1];
    }
}

----------------------------------------------------------------

public class krolikiDZ {
    public static void main(String[] args) {
        final int N = 12;
        System.out.println(2*krolik(N));//2* ile jest któlików po N miesiacach
    }
static int krolik(int n){
        if(n==0)
        {
            return 0;
        }
    if(n == 1 || n==2)
    {
        return 1;
    }
    else
    {
        return krolik(n-1)+krolik(n-2);
    }
        }
}

----------------------------------------------------------------

public class krolikiPD {
    public static void main(String[] args) {
        final int N = 12;
        System.out.println(krolikPD(N)); // ile bedzie par krolików po N miesiacach
    }

    static int krolikPD(int n) {
        int[] tab = new int[n + 1];

        tab[1] = 1;
        tab[2] = 1;
        for (int i = 3; i < tab.length; i++) {
            tab[i] = tab[i - 1] + tab[i - 2];
        }
        return tab[tab.length - 1];
    }
}







Plecak Dyn
public class Main
{
    final static int N = 6;                
    final static int MAX_V = 10;           

    final static int[] V = {6,2,3,2,3,1};  
    final static int[] W = {6,4,5,7,10,2}; 

    public static void main(String[] args)
    {
        int [][] tab = new int[N][MAX_V+1]; 

        for (int v=0; v<=MAX_V; v++) 
        {                        
            if (v<V[0]) tab[0][v] = 0;
            else tab[0][v] = W[0];
        }
        
        for (int i=1; i<N; i++) 
        {
            for (int v=0; v<=MAX_V; v++) 
            {                
                if (v<V[i]) tab[i][v] = tab[i-1][v];
                else
                {
                    int p1 = tab[i-1][v];
                    int p2 = W[i] + tab[i-1][v-V[i]];
                    if (p1>p2) tab[i][v] = p1;
                    else tab[i][v] = p2;
                }
            }
        }

        
        
           System.out.print("i = " + i + "|");
            for (int j=0; j<=MAX_V; j++)
            {
                int val = tab[i][j];
                if (val<100) System.out.print(" ");
                if (val<10) System.out.print(" ");
                System.out.print(val+"  ");
            }
            System.out.println();
        }
}
PlecakDZ
public class Main
{

    final static int N = 6;                
    final static int MAX_V = 10;           

    final static int[] V = {6,2,3,2,3,1};  
    final static int[] W = {6,4,5,7,10,2}; 

    static int plecak(int i, int v)
    {
        int w1; 
        int w2; 
        
        if (i == 0 && v < V[0])
        {
            return 0;
        }
        
        if (i == 0 && v >= V[0])
        {
            return W[0];
        }        
        w1 = plecak(i - 1, v); 
       
        if (i > 0 && v < V[i])
        {
            return w1;
        }
        
        w2 = W[i] + plecak(i - 1, v - V[i]);
        
        if (w2 > w1) // gdy i > 0 && v >= V[i]
        {
            return w2;
        }
        else
        {
            return w1;
        }
    }

    public static void main(String[] args)
    {
        System.out.println("Wartosc przedmiotow: " + plecak(N - 1, MAX_V));
    }
}

Plecak Zachłanny
public class PleacakZachlanny {
    static final int N = 6;
    static final int MAX_V = 10;
    static final int[] V = new int[]{2, 6, 3, 3, 1, 2};
    static final int[] W = new int[]{4, 6, 5, 10, 2, 7};
    public PleacakZachlanny() {
    }
    public static void pakujMale() {
        boolean[] rozw = new boolean[6];
        int sumW;
        for(sumW = 0; sumW < 6; ++sumW) {
            rozw[sumW] = false;
        }
        sumW = 0;
        int sumV = 0;
        while(true) {
            int i = Integer.MAX_VALUE;
            int maxPoz = -1;
            for(int i = 0; i < 6; ++i) {
                if (!rozw[i] && sumV + V[i] <= 10 && V[i] < i) {
                    i = V[i];
                    maxPoz = i;
                }
            }
            if (maxPoz <= -1) {
                System.out.println("Wartosc optymalnie zapakowanego plecaka: " + sumW);
                System.out.print("Przedmioty w plecaku: ");
                for(i = 0; i < 6; ++i) {
                    if (rozw[i]) {
                        System.out.print("" + i + " ");
                    }
                }
                System.out.println();
                return;
            }
            rozw[maxPoz] = true;
            sumW += W[maxPoz];
            sumV += V[maxPoz];
        }
    }

    public static void pakujCenne() {
        boolean[] rozw = new boolean[6];
        int sumW;
        for(sumW = 0; sumW < 6; ++sumW) {
            rozw[sumW] = false;
        }
        sumW = 0;
        int sumV = 0;
        while(true) {
            int i = 0;
            int maxPoz = -1;
            for(int i = 0; i < 6; ++i) {
                if (!rozw[i] && sumV + V[i] <= 10 && W[i] > i) {
                    i = W[i];
                    maxPoz = i;
                }
            }
            if (maxPoz <= -1) {
                System.out.println("Wartosc optymalnie zapakowanego plecaka: " + sumW);
                System.out.print("Przedmioty w plecaku: ");
                for(i = 0; i < 6; ++i) {
                    if (rozw[i]) {
                        System.out.print("" + i + " ");
                    }
                }
                System.out.println();
                return;
            }
            rozw[maxPoz] = true;
            sumW += W[maxPoz];
            sumV += V[maxPoz];
        }
    }
    public static void pakujNaIlorazie() {
        boolean[] rozw = new boolean[6];
        int sumW;
        for(sumW = 0; sumW < 6; ++sumW) {
            rozw[sumW] = false;
        }
        sumW = 0;
        int sumV = 0;
        while(true) {
            double maxFrac = 0.0;
            int maxPoz = -1;
            for(int i = 0; i < 6; ++i) {
                if (!rozw[i]) {
                    double frac = (double)W[i] / (double)V[i];
                    if (sumV + V[i] <= 10 && frac > maxFrac) {
                        maxFrac = frac;
                        maxPoz = i;
                    }
                }
            }
            if (maxPoz <= -1) {
                System.out.println("Wartosc optymalnie zapakowanego plecaka: " + sumW);
                System.out.print("Przedmioty w plecaku: ");
                for(int i = 0; i < 6; ++i) {
                    if (rozw[i]) {
                        System.out.print("" + i + " ");
                    }
                }

                System.out.println();
                return;
            }
            rozw[maxPoz] = true;
            sumW += W[maxPoz];
            sumV += V[maxPoz];
        }
    }
    public static void main(String[] args) {
        pakujMale();
        pakujCenne();
        pakujNaIlorazie();
    }
}













Plecak Monte Carlo
import java.util.Random;
class PlecakowyMonteCarlo {
    static final int N = 6;
    static final int MAX_V = 10;
    static final int[] V = new int[]{2, 6, 3, 3, 1, 2};
    static final int[] W = new int[]{4, 6, 5, 10, 2, 7};
    PlecakowyMonteCarlo() {
    }
    public static void main(String[] args) {
        String optKonfig = new String();
        int optV = -1;
        int optW = 0;
        Random los = new Random();
        for(int i = 0; i < 10; ++i) {
            int[] ustaw = new int[6];
            int j;
            for(j = 0; j < 6; ustaw[j] = j++) {
            }
            int sumV;
            int sumW;
            for(j = 0; j < 6; ++j) {
                sumV = los.nextInt(6);
                if (sumV != j) {
                    sumW = ustaw[j];
                    ustaw[j] = ustaw[sumV];
                    ustaw[sumV] = sumW;
                }
            }
            String locKonfig = new String();
            sumV = 0;
            sumW = 0;
            for(int j = 0; j < 6 && sumV + V[ustaw[j]] <= 10; ++j) {
                sumV += V[ustaw[j]];
                sumW += W[ustaw[j]];
                locKonfig = locKonfig + " " + ustaw[j];
            }
            if (sumW > optW) {
                optW = sumW;
                optV = sumV;
                optKonfig = locKonfig;
            }
        }
        System.out.println("Calkowita objetosc: " + optV);
        System.out.println("Calkowita wartosc: " + optW);
        System.out.println("Konfiguracja: " + optKonfig);
        System.out.println("Niewykorzystana objetosc: " + (10 - optV));
    }
}
    
